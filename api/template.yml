Transform: 'AWS::Serverless-2016-10-31'
Globals:
  Function:
    Runtime: nodejs12.x
    Timeout: 30
    Environment:
      Variables:
        CORS_URL: !Ref CorsUrl
        SIGNING_KEY_NAME: !Ref SigningKeyName
        SECRET_NAME: !Ref SecretName
        TOKEN_DURATION: !Ref TokenDuration
        DB_HOST: !ImportValue FireDbEndPoint
        DB_USERNAME: !Join ['', ['{{resolve:secretsmanager:', !ImportValue  FireDbSecretArn, ':SecretString:username}}' ]]
        DB_PASSWORD: !Join ['', ['{{resolve:secretsmanager:', !ImportValue  FireDbSecretArn, ':SecretString:password}}' ]]
        DB_NAME: !ImportValue FireDbName
    VpcConfig:
      SecurityGroupIds:
        - !ImportValue FireDbSecurityGroup
      SubnetIds:
        - !ImportValue FireDbSubnetOne
        - !ImportValue FireDbSubnetTwo

Parameters:
  TokenDuration:
    Description: Length of life for normal token
    Type: String
  SigningKeyName:
    Description: Name of the key used to sign / validate tokens
    Type: String
  SecretName:
    Description: Name of the secret pair used to sign / validate tokens
    Type: String
  CorsUrl:
    Description: URL that will be used for CORS
    Type: String
  S3Bucket:
    Description: Bucket that will contain the build artifacts
    Type: String
  Stage:
    Description: Env stage stack is deployed to
    Type: String
  ApiName:
    Description: Name of the API
    Type: String
  AuthSecretName:
    Type: String
  AuthSecretKey:
    Type: String
  AuthSecretValue:
    Type: String

Resources:
# Secret
  AuthSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Ref AuthSecretName
      Description: This contains the string to sign tokens
      SecretString:
        !Sub |
          {
            ${!Ref AuthSecretKey}: ${!Ref AuthSecretValue}
          }

# Lambdas
  LambdaLocalCorsStub:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/options/
      Handler: index.handler
      Role: arn:aws:iam::867997404618:role/lambda-dynamo-xray
      FunctionName: !Sub ${Stage}-${ApiName}-cors_handler
      Timeout: 30
      Events:
        ClockInOptions:
          Type: Api
          Properties:
            RestApiId: !Ref FireAPI
            Path: /{cors+}
            Method: OPTIONS

  Register:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/user/register
      Handler: index.handler
      Role: !GetAtt "AuthRole.Arn"
      Events:
        http:
          Type: Api
          Properties:
            RestApiId: !Ref FireAPI
            Path: /register
            Method: post

  Login:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/user/login
      Handler: index.handler
      Role: !GetAtt "AuthRole.Arn"
      Environment:
        Variables:
          TOKEN_DURATION: !Ref TokenDuration
      Events:
        http:
          Type: Api
          Properties:
            RestApiId: !Ref FireAPI
            Path: /login
            Method: post

  GraphQL:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 512
      CodeUri: src/lambdas/graphql
      Handler: index.handler
      Role: !GetAtt GraphQLRole.Arn
      Events:
        http:
          Type: Api
          Properties:
            RestApiId: !Ref FireAPI
            Path: /graphql
            Method: post


# API
  FireAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Ref ApiName
      StageName: !Sub ${ApiName}-${Stage}
      DefinitionBody:
        Fn::Transform:
          Name: 'AWS::Include'
          Parameters:
            Location: !Sub s3://${S3Bucket}/swagger-api-template.json

# Roles
  AuthRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: !Sub ${Stage}-fire-graphql-role
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: '*'
              # For signing tokens
              - Action:
                - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  Fn::Join:
                  - ''
                  - - 'arn:aws:secretsmanager:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - :secret/
                    - Ref: SigningKeyName

  GraphQLRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
      Policies:
      - PolicyName: !Sub ${Stage}-rds-test-role
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole