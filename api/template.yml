Transform: 'AWS::Serverless-2016-10-31'
Globals:
  Function:
    Runtime: nodejs12.x
    Timeout: 30
    Environment:
      Variables:
        CORS_URL: !Ref CorsUrl

        DB_CLIENT: !Ref DatabaseClient
        DB_HOST: !Ref DatabaseHost
        DB_PORT: !Ref DatabasePort
        DB_USER: !Ref DatabaseUser
        DB_PASSWORD: !Ref DatabasePassword
        DB_NAME: !Ref DatabaseName

        # These will eventually be only in the authorizer
        SIGNING_KEY_NAME: !Ref SigningKeyName
        SECRET_NAME: !Ref SecretName

Parameters:
  DatabaseClient:
    Description: Name of the client used to interact with DB
    Type: String
  DatabaseHost:
    Description: Host name of the DB instance
    Type: String
  DatabasePort:
    Description: Port of the host DB is running on
    Type: String
  DatabaseUser:
    Description: Username of the db
    Type: String
  DatabasePassword:
    Description: Password of the db user
    Type: String
  DatabaseName:
    Description: Name of db
    Type: String
  TokenDuration:
    Description: Length of life for normal token
    Type: String
  SigningKeyName:
    Description: Name of the key used to sign / validate tokens
    Type: String
  SecretName:
    Description: Name of the secret pair used to sign / validate tokens
    Type: String
  CorsUrl:
    Description: URL that will be used for CORS
    Type: String
  S3Bucket:
    Description: Bucket that will contain the build artifacts
    Type: String
  Stage:
    Description: Env stage stack is deployed to
    Type: String
  ApiName:
    Description: Name of the API
    Type: String

Resources:
  LambdaLocalCorsStub:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/options/
      Handler: index.handler
      Role: arn:aws:iam::867997404618:role/lambda-dynamo-xray
      FunctionName: !Sub ${Stage}-${ApiName}-cors_handler
      Timeout: 30
      Events:
        ClockInOptions:
          Type: Api
          Properties:
            RestApiId: !Ref FireAPI
            Path: /{cors+}
            Method: OPTIONS

  GraphQL:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/graphql
      Handler: index.handler
      Role: !GetAtt "GraphQLRole.Arn"
      Events:
        http:
          Type: Api
          Properties:
            RestApiId: !Ref FireAPI
            Path: /graphql
            Method: post
 
  Register:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/user/register
      Handler: index.handler
      Role: !GetAtt "RegisterRole.Arn"
      Environment:
        Variables:
          TOKEN_DURATION: !Ref TokenDuration
      Events:
        http:
          Type: Api
          Properties:
            RestApiId: !Ref FireAPI
            Path: /register
            Method: post

  ######## API #########
  FireAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Ref ApiName
      StageName: !Sub ${Stage}-new-new
      DefinitionBody:
        Fn::Transform:
          Name: 'AWS::Include'
          Parameters:
            Location: !Sub s3://${S3Bucket}/swagger-api-template.json

  ######## Roles #########
  GraphQLRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: !Sub ${Stage}-fire-graphql-role
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: '*'
  
  RegisterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: !Sub ${Stage}-fire-graphql-role
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: '*'
              # For signing tokens
              - Action:
                - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  Fn::Join:
                  - ''
                  - - 'arn:aws:secretsmanager:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - :secret/
                    - Ref: SigningKeyName
